class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        # dp[i][j] will be True if s[0..i-1] matches p[0..j-1]
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        
        # Empty string matches with empty pattern
        dp[0][0] = True
        
        # Handle patterns like a*, a*b*, a*b*c* matching empty string
        for j in range(1, len(p) + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 2]  # skip the char before '*' and the '*' itself
        
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                    dp[i][j] = dp[i - 1][j - 1]  # If characters match or '.' is present
                elif p[j - 1] == '*':
                    # Two possibilities:
                    # 1. Ignore '*' and the preceding character (dp[i][j-2])
                    # 2. If the preceding character matches s[i-1] or it is '.', then repeat the character (dp[i-1][j])
                    dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] if (s[i - 1] == p[j - 2] or p[j - 2] == '.') else False)
        
        # The result will be stored in dp[len(s)][len(p)]
        return dp[len(s)][len(p)]

# Example usage:
sol = Solution()

# Test cases:
print(sol.isMatch("aa", "a"))     # Output: False
print(sol.isMatch("aa", "a*"))    # Output: True
print(sol.isMatch("ab", ".*"))    # Output: True
